# -*- coding: utf-8 -*-
"""Navio_Liga_da_Justica.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q2o9VQRymd4dee3o9ICmwbIfL7Lxj4PO
"""

import pandas as pd
import matplotlib as mt
import seaborn as sb

df = pd.read_excel('/content/Liga da Justica.xlsx')

df.head()

df.info()

df.describe()

df['Carrier']

# Contar quantos containers existem
quantidade_containers = df['Container'].count()

# Exibir o resultado
print("Número de containers:", quantidade_containers)

# Contar a quantidade de valores únicos na coluna "Weight"
quantidade_valores_unicos_weight = df['Weight'].nunique()

# Exibir o resultado
print("Quantidade de valores únicos na coluna 'Weight':", quantidade_valores_unicos_weight)

# Somar todos os valores na coluna "Weight"
total_weight = df['Weight'].sum()

# Formatar o total como "93.618,018" sem os zeros finais
total_weight_formatado = "{:,.3f}".format(total_weight).replace(",", ".").rstrip("0").rstrip(".")

# Exibir o resultado formatado
print("Total de pesos na coluna 'Weight':", total_weight_formatado)

# Função para mapear os tamanhos dos containers para a quantidade de TEUs
def mapear_teu(tamanho):
    if tamanho == '20':
        return 1
    elif tamanho == '40':
        return 2
    else:
        return 0  # Se o tamanho não for 20 ou 40, consideramos como 0 TEUs

# Aplicar a função à coluna "Tamanho" e criar uma nova coluna "TEUs"
df['TEUs'] = df['Tamanho'].apply(mapear_teu)

# Calcular a soma total de TEUs
total_teus = df['TEUs'].sum()

# Exibir o resultado
print("Total de TEUs na coluna 'Tamanho':", total_teus)

# Função para mapear a coluna "Teus" diretamente para a quantidade de TEUs
def mapear_teu(teus):
    try:
        return int(teus)  # Converte o valor de "Teus" para um número inteiro
    except ValueError:
        return 0  # Se não for um número válido, considera como 0 TEUs

# Aplicar a função à coluna "Teus" e criar uma nova coluna "TEUs"
df['TEUs'] = df['Teus'].apply(mapear_teu)

# Calcular a soma total de TEUs
total_teus = df['TEUs'].sum()

# Exibir o resultado
print("Total de TEUs na coluna 'Teus':", total_teus)

# Agrupar os dados por "POL" e calcular a contagem de containers e a soma dos pesos
resumo_por_pol = df.groupby('POL').agg({'Container': 'count', 'Weight': 'sum'}).reset_index()

# Renomear as colunas para tornar o resultado mais claro
resumo_por_pol = resumo_por_pol.rename(columns={'Container': 'Quantidade de Containers', 'Weight': 'Peso Total (toneladas)'})

# Exibir o resultado
print(resumo_por_pol)

# Agrupar os dados por "POL" e calcular a contagem de containers e a soma dos pesos
resumo_por_pol = df.groupby('POL').agg({'Container': 'count', 'Weight': 'sum'}).reset_index()

# Formatar o peso total em toneladas com separadores de milhares
resumo_por_pol['Peso Total (toneladas)'] = resumo_por_pol['Weight'].apply(lambda x: '{:,.3f}'.format(x).replace(',', '.'))

# Renomear as colunas para tornar o resultado mais claro
resumo_por_pol = resumo_por_pol.rename(columns={'Container': 'Quantidade de Containers'})

# Exibir o resultado
print(resumo_por_pol)

# Agrupar os dados por "POL" e calcular a contagem de containers e a soma dos pesos
resumo_por_pol = df.groupby('POL').agg({'Container': 'count', 'Weight': 'sum'}).reset_index()

# Formatar o peso total em toneladas com separadores de milhares e sem os três zeros finais
resumo_por_pol['Peso Total (toneladas)'] = resumo_por_pol['Weight'].apply(lambda x: '{:,.3f}'.format(x).replace(',', '.').rstrip('0').rstrip('.'))

# Renomear as colunas para tornar o resultado mais claro
resumo_por_pol = resumo_por_pol.rename(columns={'Container': 'Quantidade de Containers'})

# Exibir o resultado
print(resumo_por_pol)

# Agrupar os dados por "POD" e calcular a contagem de containers e a soma dos pesos
resumo_por_pod = df.groupby('POD').agg({'Container': 'count', 'Weight': 'sum'}).reset_index()

# Formatar o peso total em toneladas com separadores de milhares e sem os três zeros finais
resumo_por_pod['Peso Total (toneladas)'] = resumo_por_pod['Weight'].apply(lambda x: '{:,.3f}'.format(x).replace(',', '.').rstrip('0').rstrip('.'))

# Renomear as colunas para tornar o resultado mais claro
resumo_por_pod = resumo_por_pod.rename(columns={'Container': 'Quantidade de Containers'})

# Exibir o resultado
print(resumo_por_pod)

# Agrupar os dados por "Carrier" e "POL" e calcular a soma dos pesos
resumo_por_carrier_pol = df.groupby(['Carrier', 'POL'])['Weight'].sum().reset_index()

# Formatar o peso total em toneladas com separadores de milhares e sem os três zeros finais
resumo_por_carrier_pol['Peso Total (toneladas)'] = resumo_por_carrier_pol['Weight'].apply(lambda x: '{:,.3f}'.format(x).replace(',', '.').rstrip('0').rstrip('.'))

# Renomear as colunas para tornar o resultado mais claro
resumo_por_carrier_pol = resumo_por_carrier_pol.rename(columns={'Weight': 'Peso Total (toneladas)'})

# Exibir o resultado
print(resumo_por_carrier_pol)

# Filtrar os dados para incluir apenas containers reefer (supondo que a coluna "Type" identifica os containers)
containers_reefer = df[df['Type'] == 'Setting']

# Agrupar os dados filtrados por "POL" e calcular a contagem de containers reefer e a soma dos pesos
resumo_reefer_por_pol = containers_reefer.groupby('POL').agg({'Container': 'count', 'Weight': 'sum'}).reset_index()

# Formatar o peso total em toneladas com separadores de milhares e sem os três zeros finais
resumo_reefer_por_pol['Peso Total Reefer (toneladas)'] = resumo_reefer_por_pol['Weight'].apply(lambda x: '{:,.3f}'.format(x).replace(',', '.').rstrip('0').rstrip('.'))

# Renomear as colunas para tornar o resultado mais claro

# Defina o valor de "Setting" que você deseja buscar
valor_setting_desejado = 'Valor Desejado'  # Substitua 'Valor Desejado' pelo valor que você está buscando

# Filtrar os dados com base no valor de "Setting"
dados_filtrados = df[df['Setting'] == valor_setting_desejado]

# Exibir os dados filtrados
print(dados_filtrados)

import pandas as pd

# Suponha que a coluna "POL" representa o porto de carregamento e a coluna "Setting" representa as configurações dos containers

# Agrupar os dados por "POL" e "Setting" e calcular a contagem de configurações e a soma dos pesos
resumo_setting_por_pol = df.groupby(['POL', 'Setting']).agg({'Container': 'count', 'Weight': 'sum'}).reset_index()

# Formatar o peso total em toneladas com separadores de milhares e sem os três zeros finais
resumo_setting_por_pol['Peso Total (toneladas)'] = resumo_setting_por_pol['Weight'].apply(lambda x: '{:,.3f}'.format(x).replace(',', '.').rstrip('0').rstrip('.'))

# Renomear as colunas para tornar o resultado mais claro
resumo_setting_por_pol = resumo_setting_por_pol.rename(columns={'Container': 'Quantidade de Containers'})

# Exibir o resultado
print(resumo_setting_por_pol)

# Suponha que a coluna "POL" representa o porto de carregamento e a coluna "Class" representa a classe dos containers

# Agrupar os dados por "POL" e "Class" e calcular a contagem de classes e a soma dos pesos
resumo_class_por_pol = df.groupby(['POL', 'Class']).agg({'Container': 'count', 'Weight': 'sum'}).reset_index()

# Formatar o peso total em toneladas com separadores de milhares e sem os três zeros finais
resumo_class_por_pol['Peso Total (toneladas)'] = resumo_class_por_pol['Weight'].apply(lambda x: '{:,.3f}'.format(x).replace(',', '.').rstrip('0').rstrip('.'))

# Renomear as colunas para tornar o resultado mais claro
resumo_class_por_pol = resumo_class_por_pol.rename(columns={'Container': 'Quantidade de Classes'})

# Exibir o resultado
print(resumo_class_por_pol)

# Suponha que a coluna "Tamanho" representa o tamanho dos containers

# Contar a quantidade de containers de 20 e 40 pés
quantidade_containers_20 = len(df[df['Tamanho'] == '20'])
quantidade_containers_40 = len(df[df['Tamanho'] == '40'])

# Exibir o resultado
print("Quantidade de Containers de 20 pés:", quantidade_containers_20)
print("Quantidade de Containers de 40 pés:", quantidade_containers_40)

# Suponha que a coluna "Model" representa o modelo dos containers, com "Full" para cheio e "Empty" para vazio

# Agrupar os dados por "POL" (Port of Loading) e "Model" e contar a quantidade de cheios e vazios
resumo_model_por_pol = df.groupby(['POL', 'Model'])['Container'].count().reset_index()

# Pivotar a tabela para ter "POL" como índice e "Model" como colunas
resumo_pivotado = resumo_model_por_pol.pivot(index='POL', columns='Model', values='Container')

# Preencher valores ausentes com zero (caso não haja registros de "Full" ou "Empty" para um porto)
resumo_pivotado = resumo_pivotado.fillna(0)

# Renomear as colunas para tornar o resultado mais claro
resumo_pivotado = resumo_pivotado.rename(columns={'Full': 'Cheios', 'Empty': 'Vazios'})

# Exibir o resultado
print(resumo_pivotado)

# Suponha que a coluna "Model" representa o modelo dos containers, com "Full" para cheio e "Empty" para vazio

# Agrupar os dados por "POL" (Port of Discharge) e "Model" e contar a quantidade de cheios e vazios
resumo_model_por_pol = df.groupby(['POD', 'Model'])['Container'].count().reset_index()

# Pivotar a tabela para ter "POL" como índice e "Model" como colunas
resumo_pivotado = resumo_model_por_pol.pivot(index='POD', columns='Model', values='Container')

# Preencher valores ausentes com zero (caso não haja registros de "Full" ou "Empty" para um porto)
resumo_pivotado = resumo_pivotado.fillna(0)

# Renomear as colunas para tornar o resultado mais claro
resumo_pivotado = resumo_pivotado.rename(columns={'Full': 'Cheios', 'Empty': 'Vazios'})

# Exibir o resultado
print(resumo_pivotado)

# Suponha que a coluna "Delivery" contenha os valores de entrega

# Contar a quantidade de registros para cada valor único em "Delivery"
contagem_por_delivery = df['Delivery'].value_counts().reset_index()

# Renomear as colunas para tornar o resultado mais claro
contagem_por_delivery = contagem_por_delivery.rename(columns={'index': 'Delivery', 'Delivery': 'Quantidade'})

# Exibir o resultado
print(contagem_por_delivery)

# Somar o peso total dos containers
peso_total_containers = df['Weight'].sum()

# Verificar se o peso total é maior que 37.000 toneladas (over) ou menor (under)
if peso_total_containers > 37000:
    status = 'over'
elif peso_total_containers < 37000:
    status = 'under'
else:
    status = 'igual a 37.000'

# Exibir o resultado
print(f'O peso total dos containers é {status} as 37.000 toneladas.')

# Suponha que a coluna "Weight" contenha os pesos dos containers em toneladas e que a capacidade seja de 37.000 toneladas

# Calcular o peso total dos containers
peso_total_containers = df['Weight'].sum()

# Definir a capacidade máxima (37.000 toneladas)
capacidade_maxima = 37000

# Calcular a diferença entre a capacidade e o peso total atual
diferenca = capacidade_maxima - peso_total_containers

# Exibir os resultados
print(f'Peso total atual dos containers: {peso_total_containers} toneladas')
print(f'Capacidade máxima de carga: {capacidade_maxima} toneladas')
print(f'Diferença entre a capacidade e o peso total: {diferenca} toneladas')

# Filtrar os dados para incluir apenas registros da transportadora "MIT"
df_mit = df[df['Carrier'] == 'MIT']

# Calcular o peso total dos containers da transportadora "MIT"
peso_total_mit = df_mit['Weight'].sum()

# Definir a capacidade máxima (37.000 toneladas)
capacidade_maxima = 37000

# Calcular a diferença entre a capacidade e o peso total da transportadora "MIT"
diferenca = capacidade_maxima - peso_total_mit

# Formatar o peso total em toneladas com ponto decimal
peso_total_mit_formatado = '{:,.3f}'.format(peso_total_mit).replace(',', '.')

# Exibir os resultados
print(f'Peso total atual dos containers da MIT: {peso_total_mit_formatado} toneladas')
print(f'Capacidade máxima de carga: {capacidade_maxima} toneladas')
print(f'Diferença entre a capacidade e o peso total da MIT: {diferenca} toneladas')

# Filtrar os dados para incluir apenas registros da transportadora "MIT"
df_mit = df[df['Carrier'] == 'MIT']

# Calcular o peso total dos containers da transportadora "MIT"
peso_total_mit = df_mit['Weight'].sum()

# Definir a capacidade máxima (37.000 toneladas)
capacidade_maxima = 37000

# Calcular a diferença entre a capacidade e o peso total da transportadora "MIT"
diferenca = capacidade_maxima - peso_total_mit

# Formatar o peso total em toneladas com ponto decimal
peso_total_mit_formatado = '{:,.3f}'.format(peso_total_mit).replace(',', '.')

# Determinar o status (OVER ou UNDER)
status = 'UNDER' if peso_total_mit < capacidade_maxima else 'OVER'

# Exibir os resultados
print(f'Peso total atual dos containers da MIT: {peso_total_mit_formatado} toneladas')
print(f'Capacidade máxima de carga: {capacidade_maxima} toneladas')
print(f'Diferença entre a capacidade e o peso total da MIT: {diferenca} toneladas')
print(f'Status: {status}')

# Filtrar os dados para incluir apenas registros da transportadora "NYU"
df_nyu = df[df['Carrier'] == 'NYU']

# Calcular o peso total dos containers da transportadora "NYU"
peso_total_nyu = df_nyu['Weight'].sum()

# Definir o peso-alvo (52.000 toneladas)
peso_alvo = 52000

# Calcular a diferença entre o peso-alvo e o peso total da transportadora "NYU"
diferenca = peso_alvo - peso_total_nyu

# Formatar o peso total em toneladas com ponto decimal
peso_total_nyu_formatado = '{:,.3f}'.format(peso_total_nyu).replace(',', '.')

# Formatar o peso-alvo em toneladas com ponto decimal
peso_alvo_formatado = '{:,.3f}'.format(peso_alvo).replace(',', '.')

# Determinar o status (OVER ou UNDER)
status = 'UNDER' if peso_total_nyu < peso_alvo else 'OVER'

# Exibir os resultados
print(f'Peso total atual dos containers da NYU: {peso_total_nyu_formatado} toneladas')
print(f'Peso-alvo da NYU: {peso_alvo_formatado} toneladas')
print(f'Diferença entre o peso-alvo e o peso total da NYU: {diferenca} toneladas')
print(f'Status: {status}')

# Filtrar os dados para incluir apenas registros da transportadora "PHD"
df_phd = df[df['Carrier'] == 'PHD']

# Calcular o peso total dos containers da transportadora "PHD"
peso_total_phd = df_phd['Weight'].sum()

# Definir o peso-alvo (4.000 toneladas)
peso_alvo = 2000

# Calcular a diferença entre o peso total da transportadora "PHD" e o peso-alvo
diferenca = peso_alvo - peso_total_phd  # Correção aqui, inverter a ordem

# Formatar o peso total em toneladas com ponto decimal
peso_total_phd_formatado = '{:,.3f}'.format(peso_total_phd).replace(',', '.')

# Formatar o peso-alvo em toneladas com ponto decimal
peso_alvo_formatado = '{:,.3f}'.format(peso_alvo).replace(',', '.')

# Determinar o status (UNDER ou OVER)
status = 'UNDER' if diferenca > 0 else 'OVER'  # Correção aqui, verificar se a diferença é maior que 0

# Exibir os resultados
print(f'Peso total atual dos containers da PHD: {peso_total_phd_formatado} toneladas')
print(f'Peso-alvo da PHD: {peso_alvo_formatado} toneladas')
print(f'Diferença entre o peso total e o peso-alvo da PHD: {abs(diferenca):,.3f} toneladas')  # Usar abs para garantir um valor positivo
print(f'Status: {status}')